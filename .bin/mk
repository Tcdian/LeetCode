#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const _ = require('lodash');

main();

async function main() {
    const basisTs = await getCatalog('basisTs');
    const basisJs = await getCatalog('basisJs');
    appendBasis(basisTs, basisJs);
}

async function getCatalog(fileOrDirPath) {
    const absolutePath = path.resolve('.', fileOrDirPath);
    const relativePath = path.relative('.', fileOrDirPath);
    const name = fileOrDirPath.match(/([^\/]+?)(\.(js|ts|md)){0,1}$/i)[1];
    const stat = await fs.promises.stat(absolutePath);
    if (stat.isFile()) {
        return { type: 'file', name: name, path: relativePath };
    }
    const dirs = await fs.promises.readdir(absolutePath);
    const files = await Promise.all(_.map(dirs, (dir) => getCatalog(path.join(fileOrDirPath, dir))));
    return { type: 'directory', name: name, path: relativePath, child: files };
}

async function appendBasis(basisTs, basisJs) {
    await fs.promises.appendFile(
        './README.md',
        `
#

### 数据结构与算法基础

${renderCatalog(basisTs, basisJs)}
`
    );

    function renderCatalog(basisTsCatalog, basisJsCatalog) {
        if (basisTsCatalog.type === 'file') {
            return `-   ${_.upperFirst(basisTsCatalog.name)} [[JavaScript](<${basisJsCatalog.path}>)] [[TypeScript](<${
                basisTsCatalog.path
            }>)]\n`;
        } else {
            return _.map(basisTsCatalog.child, (t) =>
                renderCatalog(
                    t,
                    basisJsCatalog.child.find((j) => j.name === t.name)
                )
            );
        }
    }
}
